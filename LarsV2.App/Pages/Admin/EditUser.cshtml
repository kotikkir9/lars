@page "{id}"
@model EditModel

@section Scripts
{
    <script src="~/lib/jquery-validation/dist/jquery.validate.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/dist/jquery.validate.unobtrusive.js"></script>
}

<h3>Rediger bruger</h3>
<hr />

<form enctype="multipart/form-data" method="post" asp-route-id="@Model.Id">
    <div asp-validation-summary="ModelOnly" class="font-weight-bold text-danger"></div>
    <div class="form-group">
        <label asp-for="UserName" style="font-weight: bold;">Brugernavn<span style="color: red;">*</span></label>
        <span class="text-danger p-2" asp-validation-for="UserName" style="font-weight:bold" ;></span>
        <input asp-for="UserName" class="form-control" placeholder="Brugernavn" value="@Model.UserName" />
    </div>
    <div class="form-group">
        <label asp-for="Email" style="font-weight: bold;">Email<span style="color: red;">*</span></label>
        <span class="text-danger p-2" asp-validation-for="Email" style="font-weight:bold;"></span>
        <input asp-for="Email" class="form-control" placeholder="Email" value="@Model.Email"/>
    </div>
    <div class="form-group">
        <label asp-for="Password" style="font-weight: bold;">Adgangskode</label>
        <span class="text-danger p-2" asp-validation-for="Password" style="font-weight:bold" ;></span>
        <input asp-for="Password" class="form-control" />
    </div>
    <div class="form-group">
        <label asp-for="PasswordConfirm" style="font-weight: bold;">Genindtast adgangskode</label>
        <span class="text-danger p-2" asp-validation-for="PasswordConfirm" style="font-weight:bold" ;></span>
        <input asp-for="PasswordConfirm" class="form-control" />
    </div>
    <hr />
    <button type="submit" class="btn btn-success">Gem ændringer</button>
</form>

@functions
{
    public class EditModel : AdminPageModel
    {
        public UserManager<IdentityUser> UserManager;

        public EditModel(UserManager<IdentityUser> userManager)
        {
            UserManager = userManager;
        }

        [BindProperty][Required]
        public string Id { get; set; }

        [BindProperty]
        [Required(ErrorMessage = "Feltet mangler at blive udfyldt")]
        public string UserName { get; set; }

        [BindProperty]
        [Required(ErrorMessage = "Feltet mangler at blive udfyldt")]
        [EmailAddress]
        public string Email { get; set; }

        [BindProperty]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [BindProperty][DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "Adgangskoder er ikke ens")]
        public string PasswordConfirm { get; set; }

        public async Task<IActionResult> OnGetAsync(string id)
        {
            IdentityUser user = await UserManager.FindByIdAsync(id);
            if(user == null)
            {
                return RedirectToPage("NotFound");
            }

            Id = user.Id; 
            UserName = user.UserName; 
            Email = user.Email;

            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            if(ModelState.IsValid)
            {
                IdentityUser user = await UserManager.FindByIdAsync(Id);
                user.UserName = UserName;
                user.Email = Email;
                IdentityResult result = await UserManager.UpdateAsync(user);

                if(result.Succeeded && !string.IsNullOrEmpty(Password))
                {
                    await UserManager.RemovePasswordAsync(user);
                    result = await UserManager.AddPasswordAsync(user, Password);
                }

                if(result.Succeeded)
                {
                    return RedirectToPage("Users");
                }

                foreach(var error in result.Errors)
                {
                    ModelState.AddModelError("", error.Description);
                }
            }
            return Page();
        }
    }
}